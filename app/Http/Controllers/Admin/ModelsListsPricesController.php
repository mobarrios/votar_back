<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Repositories\Admin\ModelsListsPricesItemsRepo;
use App\Http\Repositories\Admin\ModelsListsPricesRepo as Repo;
use App\Http\Repositories\Admin\ModelsRepo;
use App\Http\Repositories\Admin\ProvidersRepo;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\Session;
use Maatwebsite\Excel\Excel;


class ModelsListsPricesController extends Controller
{
    protected $modelsRepo;
    protected $modelsListsPricesRepo;
    protected $providersRepo;

    public function __construct(Request $request, Repo $repo, Route $route, ProvidersRepo $providersRepo, ModelsRepo $modelsRepo, ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo)
    {

        $this->request = $request;
        $this->repo = $repo;
        $this->route = $route;

        $this->section = 'modelsListsPrices';
        $this->data['section'] = $this->section;

        //data
        $this->data['providers'] = $providersRepo->ListsData('name', 'id');
        $this->data['models_lists'] = $modelsRepo->ListsData('name', 'id');

        $this->modelsRepo = $modelsRepo;
        $this->modelsListsPricesRepo = $modelsListsPricesItemsRepo;
        $this->providersRepo = $providersRepo;
    }

    public function edit()
    {
        return parent::edit(); // TODO: Change the autogenerated stub
    }

    public function addItems(ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo)
    {
        $modelsListsPricesItemsRepo->create($this->request);

        return redirect()->route('admin.modelsListsPrices.edit', $this->request->models_lists_prices_id);
    }

    public function editItems(ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo)
    {
        $this->data['modelItems'] = $modelsListsPricesItemsRepo->find($this->route->getParameter('item'));

        return parent::edit();
    }

    public function updateItems(ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo, $id)
    {
        $modelsListsPricesItemsRepo->update($id, $this->request);

        return parent::edit();
    }

    public function deleteItems(ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo)
    {
        $modelsListsPricesItemsRepo->destroy($this->route->getParameter('item'));

        return parent::edit();
    }


    // bajar lista de precios

    public function download(Excel $excel)
    {
        $providersId = $this->route->getParameter('providersId');

        $data['providers'] = $this->providersRepo->getModel()->with('Models')->find($providersId);


        $excel->create('Exportaci贸n', function ($ex) use ($data) {

            $ex->sheet('Excel sheet', function ($sheet) use ($data) {

                $sheet->loadView('admin.modelsListsPrices.xls', $data);
            });

        })->export('xls');

    }

    public function upload()
    {
        $this->data['activeBread'] = 'modelsListsPrices';
        $this->data['section'] = 'modelsListsPrices';
        $this->data['modelsListsPricesId'] = $this->route->getParameter('modelsListsPricesId');


        return view('admin.modelsListsPrices.upload')->with($this->data);
    }

    public function postUpload(Excel $excel, ModelsListsPricesItemsRepo $modelsListsPricesItemsRepo)
    {

        $data = $excel->load($this->request->file)->get();
        $id = $this->route->getParameter('modelsListsPricesId');


        foreach ($data as $d => $b) {

            $data =
                [   'models_lists_prices_id' => $id,
                    'models_id' => intval($b->cod),
                    'price_list' => (double)$b->precio_lista,
                    'price_net' => (double)$b->precio_contado
                ];

            $modelsListsPricesItemsRepo->createParam($data);
        }


        return redirect()->route('admin.modelsListsPrices.edit', $id);
    }


    /*
    public function addItems()
    {
        $data   = $this->request;
        if(empty($data))
            return ["error" => "Debes completar los campos"];
        else{

            $model  = $this->modelsRepo->find($data->models_id);

            $arr =  session()->has($this->section.'Items') ? session($this->section.'Items') : [];

            $newItem =
            [
                'models_id' => $data->models_id,
                'price_list' => $data->price_list,
                'price_net' => $data->price_net,
                'max_discount' => $data->max_discount,
                'obs'=> $data->obs
            ];

            array_push($arr, $newItem);

            session()->put($this->section.'Items',$arr);

            return [
                    'error' => 'Se agreg贸 correctamente el item',
                    'success' => [
                        'models_name' => $model->name,
                        'models_id' => $model->id,
                        'price_list' => $data->price_list,
                        'price_net' => $data->price_net,
                        'max_discount' => $data->max_discount
                    ]
            ];
        }
    }

    public function editItems()
    {
        $data   = $this->request;
        if(empty($data))
            return ["error" => "Debes completar los campos"];

        else{

            $model  = $this->modelsRepo->find($data->models_id);

            $arr =  session()->has($this->section.'Items') ? session($this->section.'Items') : [];

            $newItem =
            [
                'models_id' => $data->models_id,
                'price_list' => $data->price_list,
                'price_net' => $data->price_net,
                'max_discount' => $data->max_discount,
                'obs'=> $data->obs
            ];

//            array_push($arr, $newItem);

            foreach($arr as $ind => $val){
                if($val["models_id"] == $data->id){
                    $arr[$ind] = $newItem;
                }
            }

            session()->put($this->section.'Items',$arr);

            return [
                    'error' => 'Se edit贸 correctamente el item',
                    'success' => [
                        'models_name' => $model->name,
                        'models_id' => $model->id,
                        'price_list' => $data->price_list,
                        'price_net' => $data->price_net,
                        'max_discount' => $data->max_discount
                    ]
            ];
        }
    }

    public function deleteItems()
    {
        $data   = $this->request;
        $arr =  session()->has($this->section.'Items') ? session($this->section.'Items') : [];

        foreach($arr as $ind => $val){
            if($val["models_id"] == $data->id){
                unset($arr[$ind]);
            }
        }

        session()->put($this->section.'Items',$arr);

        return "Se elimin贸 correctamente el item";
    }
    */
}